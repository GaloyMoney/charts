load('ext://helm_resource', 'helm_resource')
load('ext://namespace', 'namespace_create')
load('ext://secret', 'secret_from_dict')
load('../common/Tiltfile', 'copy_secret', 'helm_release')
update_settings(k8s_upsert_timeout_secs=120)

name_prefix = 'galoy-dev'
galoy_namespace = '{}-galoy'.format(name_prefix)
bitcoin_namespace = '{}-bitcoin'.format(name_prefix)
smoketest_namespace = '{}-smoketest'.format(name_prefix)

namespace_create(galoy_namespace)

copy_secret(
  source_secret_name='network',
  source_namespace=bitcoin_namespace,
  target_namespace=galoy_namespace,
  resource_deps=['bitcoind']
)

copy_secret(
  source_secret_name='bitcoind-rpcpassword',
  source_namespace=bitcoin_namespace,
  target_namespace=galoy_namespace,
  resource_deps=['bitcoind']
)

copy_secret(
  source_secret_name='lnd1-pubkey',
  source_namespace=bitcoin_namespace,
  target_namespace=galoy_namespace,
  resource_deps=['lnd1']
)

copy_secret(
  source_secret_name='lnd1-pubkey',
  source_namespace=bitcoin_namespace,
  target_namespace=galoy_namespace,
  target_secret_name='lnd2-pubkey',
  resource_deps=['lnd1']
)

copy_secret(
  source_secret_name='lnd1-credentials',
  source_namespace=bitcoin_namespace,
  target_namespace=galoy_namespace,
  resource_deps=['lnd1']
)

copy_secret(
  source_secret_name='lnd1-credentials',
  source_namespace=bitcoin_namespace,
  target_namespace=galoy_namespace,
  target_secret_name='lnd2-credentials',
  resource_deps=['lnd1']
)

copy_secret(
  source_secret_name='loop1-credentials',
  source_namespace=bitcoin_namespace,
  target_namespace=galoy_namespace,
  resource_deps=['loop1']
)

copy_secret(
  source_secret_name='loop1-credentials',
  source_namespace=bitcoin_namespace,
  target_namespace=galoy_namespace,
  target_secret_name='loop2-credentials',
  resource_deps=['loop1']
)

k8s_yaml(secret_from_dict(
  name='gcs-sa-key',
  namespace=galoy_namespace,
  inputs={'key': 'dummy'}
))

k8s_yaml(secret_from_dict(
  name='bria-api-key',
  namespace=galoy_namespace,
  inputs={'api-key': 'bria_dev_000000000000000000000'}
))

k8s_yaml(secret_from_dict(
  name='geetest-key',
  namespace=galoy_namespace,
  inputs={'key': 'dummy', 'id': 'dummy'}
))

k8s_yaml(secret_from_dict(
  name='galoy-mongodb',
  namespace=galoy_namespace,
  inputs={
    'mongodb-password' : 'password',
    'mongodb-passwords' : 'password',
    'mongodb-root-password' : 'password',
    'mongodb-replica-set-key' : 'replica'
  }
))

k8s_yaml(secret_from_dict(
  name='galoy-mongodb-connection-string',
  namespace=galoy_namespace,
  inputs={
    'mongodb-con' : 'mongodb://testGaloy:password@galoy-mongodb:27017/galoy'
  }
))

# galoy-redis-pw secret
k8s_yaml(secret_from_dict(
  name='galoy-redis-pw',
  namespace=galoy_namespace,
  inputs={'redis-password': 'redispw'}
))

# twilio-secret secret
k8s_yaml(secret_from_dict(
  name='twilio-secret',
  namespace=galoy_namespace,
  inputs={
    'TWILIO_VERIFY_SERVICE_ID' : 'dummy',
    'TWILIO_ACCOUNT_SID' : 'ACdummy',
    'TWILIO_AUTH_TOKEN' : 'dummy'
  }
))

# svix-secret secret
k8s_yaml(secret_from_dict(
  name='svix-secret',
  namespace=galoy_namespace,
  inputs={
    'svix-secret': 'dummy'
  }
))

# proxy-check-api-key secret
k8s_yaml(secret_from_dict(
  name='proxy-check-api-key',
  namespace=galoy_namespace,
  inputs={
    'api-key': 'dummy'
  }
))

# kratos-secret secret
k8s_yaml(secret_from_dict(
  name='kratos-secret',
  namespace=galoy_namespace,
  inputs={
    'master_user_password': 'dummy',
    'callback_api_key': 'dummy',
  }
))

# galoy-oathkeeper secret
k8s_yaml(secret_from_dict(
  name='galoy-oathkeeper',
  namespace=galoy_namespace,
  inputs={
    'mutator.id_token.jwks.json': local(
      "cat oathkeeper_mutator_id_token_jwks.json | jq -c"
    )
  }
))

local('helm repo add bitnami https://charts.bitnami.com/bitnami')

helm_resource(
  name='postgresql',
  chart='bitnami/postgresql',
  namespace=galoy_namespace,
  flags=[
    '--values=./postgresql-values.yml',
  ],
  labels='galoy'
)

k8s_yaml(secret_from_dict(
  name='galoy-price-history-postgres-creds',
  namespace=galoy_namespace,
  inputs={
    'username': 'price-history',
    'password': 'price-history',
    'database': 'price-history'
  }
))

k8s_yaml(secret_from_dict(
  name='api-keys',
  namespace=galoy_namespace,
  inputs={'pg-con': 'postgres://api-keys:api-keys@api-keys-postgresql:5432/api-keys'}
))

helm_release(
  '../../charts/galoy',
  name='galoy',
  namespace=galoy_namespace,
  values=['./galoy-values.yml', './galoy-regtest-values.yml'],
  dependency_build=True,
  add_repos=True
)

k8s_resource(workload='galoy-cronjob', pod_readiness='ignore')
k8s_resource(workload='galoy-price-history-cronjob', pod_readiness='ignore')
k8s_resource(workload='galoy-price-history-postgres-migrate-1', pod_readiness='ignore')
k8s_resource(workload='galoy-mongo-backup', pod_readiness='ignore')

k8s_resource(workload='api-keys', pod_readiness='ignore')
k8s_resource(workload='notifications', pod_readiness='ignore')

k8s_yaml(secret_from_dict(
  name='galoy-smoketest',
  namespace=smoketest_namespace,
  inputs={
    'galoy_endpoint' : 'galoy-oathkeeper-proxy.{}.svc.cluster.local'.format(galoy_namespace),
    'galoy_port' : '4455',
    'price_history_endpoint' : 'galoy-price-history.{}.svc.cluster.local'.format(galoy_namespace),
    'price_history_port' : '50052',
  }
))

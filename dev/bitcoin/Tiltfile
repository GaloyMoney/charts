load('ext://helm_resource', 'helm_resource')
load('ext://namespace', 'namespace_create')
load('ext://secret', 'secret_from_dict')

name_prefix = 'galoy-dev'
bitcoin_network = 'regtest'
bitcoind_rpcpassword = 'rpcpassword'
bitcoin_namespace = '{}-bitcoin'.format(name_prefix)
smoketest_namespace = '{}-smoketest'.format(name_prefix)

namespace_create(bitcoin_namespace)

k8s_yaml(secret_from_dict(
  name='bitcoind-rpcpassword',
  namespace=bitcoin_namespace,
  inputs={'password': bitcoind_rpcpassword},
))

helm_resource(
  name="bitcoind",
  chart="../../charts/bitcoind",
  namespace=bitcoin_namespace,
  flags=['--values=./bitcoind-regtest-values.yml'],
  labels="bitcoin"
)

k8s_yaml(secret_from_dict(
  name='bitcoind-onchain-rpcpassword',
  namespace=bitcoin_namespace,
  inputs={'password': bitcoind_rpcpassword},
))

k8s_yaml(secret_from_dict(
  name='bitcoind-signer-descriptor',
  namespace=bitcoin_namespace,
  inputs={
    'descriptor_json_base64': local(
      "base64 bitcoind_signers_descriptors.json | tr -d '\n\r'"
    )
  },
))

helm_resource(
  name="bitcoind-onchain",
  chart="../../charts/bitcoind",
  namespace=bitcoin_namespace,
  flags=[
    '--values=./bitcoind-regtest-values.yml',
    '--values=./bitcoind-onchain-values.yml'
  ],
  labels="bitcoin"
)

local_resource(
  name="bitcoind-block-generator",
  cmd='./generateBlock.sh',
  labels="bitcoin",
  resource_deps=["bitcoind-onchain", "bitcoind"]
)

helm_resource(
  name="lnd1",
  chart="../../charts/lnd",
  namespace=bitcoin_namespace,
  flags=[
    '--values=./lnd-regtest-values.yml',
  ],
  labels="bitcoin"
)

helm_resource(
  name="loop1",
  chart="../../charts/loop",
  namespace=bitcoin_namespace,
  flags=[
    '--values=./loop-values.yml',
  ],
  labels="bitcoin"
)

# TODO: uncomment fulcrum when we actually use it
# helm_resource(
#   name="fulcrum",
#   chart="../../charts/fulcrum",
#   namespace=bitcoin_namespace,
#   flags=[
#     '--values=./fulcrum-regtest-values.yml',
#   ],
#   labels="bitcoin"
# )

k8s_yaml(secret_from_dict(
  name='bria',
  namespace=bitcoin_namespace,
  inputs={
    'pg-con': 'postgres://bria:bria@bria-postgresql:5432/bria',
    'signer-encryption-key': local('openssl rand -hex 32'),
  },
))

helm_resource(
  name="bria",
  chart="../../charts/bria",
  namespace=bitcoin_namespace,
  flags=[
    '--values=./bria-values.yml',
  ],
  labels="bitcoin"
)

# TODO: uncomment mempool when we actually use it
# helm_resource(
#   name="mempool",
#   chart="../../charts/mempool",
#   namespace=bitcoin_namespace,
#   flags=[
#     '--values=./mempool-regtest-values.yml',
#   ],
#   labels="bitcoin"
# )

# TODO: uncomment rtl when we actually use it
# helm_resource(
#   name="rtl",
#   chart="../../charts/rtl",
#   namespace=bitcoin_namespace,
#   labels="bitcoin"
# )

# create bitcoind smoketest secret from snippet above
k8s_yaml(secret_from_dict(
  name='bitcoind-smoketest',
  namespace=smoketest_namespace,
  inputs={
    'bitcoind_rpcpassword': bitcoind_rpcpassword,
    'bitcoind_endpoint': 'bitcoind.{}.svc.cluster.local'.format(bitcoin_namespace),
    'bitcoind_port': '18443',
    'bitcoind_user': 'rpcuser',
    'bitcoind_onchain_rpcpassword': bitcoind_rpcpassword,
    'bitcoind_onchain_endpoint': 'bitcoind.{}.svc.cluster.local'.format(bitcoin_namespace),
  }
))

# create lnd smoketest secret from snippet above
k8s_yaml(secret_from_dict(
  name='lnd-smoketest',
  namespace=smoketest_namespace,
  inputs={
    'lnd_api_endpoint': 'lnd1.{}.svc.cluster.local'.format(bitcoin_namespace),
    'lnd_p2p_endpoint': 'lnd1-p2p.{}.svc.cluster.local'.format(bitcoin_namespace),
  }
))

# create loop smoketest secret from snippet above
k8s_yaml(secret_from_dict(
  name='loop-smoketest',
  namespace=smoketest_namespace,
  inputs={
    'loop_api_endpoint': 'loop1.{}.svc.cluster.local'.format(bitcoin_namespace),
  }
))

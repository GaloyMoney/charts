## Default values for Galoy Helm Chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Provide a name in place of `galoy` for `app:` labels
##
nameOverride:

## Provide a name to substitute for the full names of resources
##
fullnameOverride:

galoy:
  ## Bitcoin Network to run this Galoy instance on
  ##
  network: mainnet

  ## Application Custom Config
  ## Ref: https://github.com/GaloyMoney/galoy/blob/main/default.yaml
  ##
  config:
    ## Default Galoy Wallet Name
    name: Galoy Wallet

    ## Apollo Configuration
    apollo:
      playground: false

  ## Docker Images for running Galoy Banking Codebase
  ##
  images:

    ## Galoy Application Image details
    ##
    app:
      ## Has api, trigger and exporter
      ##
      repository: us.gcr.io/galoy-org/galoy-app

      ## Digest of the image
      ##
      digest: "sha256:f4315937859b983d79479b1c499b434b757553f8245b4634c9a6b5ed2eb3d91c"

      ## Not used by Helm, just used to ref to the source https://github.com/GaloyMoney/galoy.git
      ## Reference for timestamping the corresponding docker image and used by internal CI.
      ##
      git_ref: "98e17a3"

    ## Galoy Application MongoDB Migration Image details
    ##
    mongodbMigrate:
      ## Has mongodb migration
      ##
      repository: us.gcr.io/galoy-org/galoy-app-migrate

      ## Digest of the image
      ##
      digest: "sha256:535bf90ae6398190eb7b163c08c57b8f426d0a2fea645d823be8a1cbefec3325"

  ## Galoy database backup configuration
  ## This is a custom backup configuration, which means data lying in
  ## MongoDB and LND can be backed up by custom scripts present in the
  ## galoy codebase itself.
  ##
  backups:

    ## Backup data to Google Cloud Storage Bucket
    ## To backup to GCS bucket, you would need a GCP Service Account
    ## that lets you upload to a specific bucket
    ##
    gcs:
      # Enable/disable uploading backup to GCS bucket
      enabled: false

      # Configuration for GCS bucket
      config:

        # GCS bucket name to upload to (it should already be created)
        bucketName: gcs-bucket-name

        # Service account to use to upload backup to above-mentioned bucket
        serviceAccount:

          # Service account credentials json file must be injected via a secret
          existingSecret:

            # Secret name
            name: gcs-sa-key

            # Secret Key
            key: gcs-sa-key.json

    ## Backup data to Dropbox
    ## To backup to dropbox, you would need an access token to upload
    ## data to your dropbox account
    ##
    dropbox:
      # Enable/disable uploading backup to dropbox
      enabled: false

      # Configuration for Dropbox
      config:

        # Access Token
        accessToken:

          # Dropbox Access Token must be injected via a secret
          existingSecret:

            # Secret Name
            name: dropbox-access-token

            # Secret Key
            key: token
  
  ## Configuration values for Galoy API components.
  ##
  api:
    ## Override the components name (defaults to api).
    ##
    nameOverride:

    ## Number of replicas.
    ##
    replicas: 1

    ## Log Level
    ##
    logLevel: debug

    ## Port on which API Server is running
    ##
    port: 4002

    ## Firebase Notifications Configuration
    ## It would need a Firebase Service Account to send out notifications
    ##
    firebaseNotifications:
      # Enable/disable notifications on the app
      enabled: false

      # Firebase Notifications Service Account must be injected via a secret
      existingSecret:

        ## Secret Name of the Service Account JSON
        name: galoyapp-firebase-serviceaccount

        # Secret Key
        key: galoyapp-firebase-serviceaccount.json

    ## Geetest Configuration
    ##
    geetestExistingSecret:
      # Secret Name
      name: geetest-key

      # Geetest ID Secret Key
      id_key: id

      # Geetest Key Secret Key
      secret_key: key

    ## JsonWebToken Secret
    ##
    jwtSecretExistingSecret:
      # Secret Name
      name: jwt-secret

      # Secret Key
      key: secret

    ## Apollo Configuration for Apollo Studio
    ##
    apollo:
      # Associate data at Apollo with this variant
      graphVariant: current

      # Report the GraphQL schema to Apollo
      schemaReporting: true

      # Graph ID and Key Secret
      existingSecret:
        # Secret Name
        name: galoy-apollo-secret

        # Apollo Graph ID key
        id_key: id

        # Apollo Key key
        key_key: key

    ## Twilio Configuration
    ##
    twilioExistingSecret:
      # Secret Name
      name: twilio-secret

      # Phone Number Secret Key
      phone_number_key: TWILIO_PHONE_NUMBER

      # Phone Number Secret Key
      account_sid_key: TWILIO_ACCOUNT_SID

      # Phone Number Secret Key
      auth_token_key: TWILIO_AUTH_TOKEN

    ## Liveness/Readiness Probes Configuration
    ## Determines if pod is healthy or if it should be killed.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    probes:
      ## Enable/disable API probes for healthcheck
      enabled: true

      ## If pod is starting up/healthy
      liveness:
        initialDelaySeconds: 60
        periodSeconds: 10
        failureThreshold: 5
        timeoutSeconds: 1

      ## When to expose the pod to the service
      readiness:
        initialDelaySeconds: 5
        failureThreshold: 5
        successThreshold: 2
        timeoutSeconds: 1


  ## Configuration values for establishing connection to LND-1
  ## TODO: This should be injected as ConfigMap from LND Chart
  ##
  lnd1:
    ## DNS for LND1
    ##
    dns: lnd1.default.svc.cluster.local

    ## Credentials to access LND RPC
    ##
    credentialsExistingSecret:
      ## Secret Name
      name: lnd1-credentials

      ## Macaroon Key
      macaroon_key: admin_macaroon_base64

      ## TLS Key
      tls_key: tls_base64

    ## Pubkey to verify LND RPC
    ##
    pubkeyExistingSecret:
      ## Secret Name
      name: lnd1-pubkey

      ## Secret Key
      key: pubkey
  
  ## Configuration values for establishing connection to LND-2
  ## TODO: This should be injected as ConfigMap from LND Chart
  ##
  lnd2:
    ## DNS for LND2
    ##
    dns: lnd2.default.svc.cluster.local

    ## Credentials to access LND RPC
    ##
    credentialsExistingSecret:
      ## Secret Name
      name: lnd2-credentials

      ## Macaroon Key
      macaroon_key: admin_macaroon_base64

      ## TLS Key
      tls_key: tls_base64

    ## Pubkey to verify LND RPC
    ##
    pubkeyExistingSecret:
      ## Secret Name
      name: lnd2-pubkey

      ## Secret Key
      key: pubkey
  
  ## Configuration values for establishing connection to BITCOIND
  ## TODO: This should be injected as ConfigMap from Bitcoin Chart
  ##
  bitcoind:
    ## DNS for bitcoind
    dns: bitcoind.default.svc.cluster.local

    ## Port on which bitcoind is running
    port: 8332

    ## RPC Password Secret
    ##
    rpcPasswordExistingSecret:
      ## Secret Name
      name: bitcoind-rpcpassword

      ## Secret Key
      key: password
  
  ## Dealer Service Connection details
  ##
  dealer:
    ## Dealer Service Host
    host: dealer-price.default.svc.cluster.local

    ## Dealer Service Port
    port: 50055

## Configuration values for Galoy Price subchart
# price:
  ## Price History Host
  # host: galoy-price.default.svc.cluster.local

  ## Price History Port
  # port: 50052


## Configuration values for the mongodb dependency.
## Ref: https://artifacthub.io/packages/helm/bitnami/mongodb/
##
## This is a necessary component and without the database, the chart will not work.
## Therefore it doesn't have any enable/disable flag.
##
# mongodb:

  ## Authentication Configuration
  # auth:
    ## Existing secret for authentication
    ## This secret gets autogenerated if secrets.create is set to true.
    ##
    # existingSecret: galoy-mongodb

    ## Username to be used for Galoy
    ## Autocreated at MongoDB initialization
    ##
    ## There should be one and only one username in the array here.
    ##
    # usernames: [ testGaloy ]

    ## Database to be used for Galoy
    ## Autocreated at MongoDB initialization
    ##
    ## There should be one and only one database in the array here.
    ##
    # databases: [ galoy ]
  
  ## Replicaset for no-downtime
  ##
  # architecture: replicaset

  ## Replicas for MongoDB
  ##
  # replicaCount: 3

## Configuration values for the redis dependency.
## Ref: https://artifacthub.io/packages/helm/bitnami/redis/
##
## This is a necessary component and without the cache, the chart will not work.
## Therefore it doesn't have any enable/disable flag.
##
redis:
  ## Redis replica config params
  replica:
    # Number of Redis to deploy
    replicaCount: 3

  ## Redis master config params
  master:
    persistence:
      enabled: true

  ## Redis auth config params
  auth:
    password: password

  ## Use sentinel on Redis pods
  sentinel:
    enabled: true

    ## Master set name
    masterSet: mymaster
  
  ## Sidecar prometheus exporter
  metrics:
    enabled: true

## For managing secrets using Helm
## Set the values if you'd want to make it configurable
##
secrets:

  ## Create the secret resource from the following values. Set this to false
  ## to manage these secrets outside Helm.
  ##
  create: true

  ## Secrets for DB access
  mongodbPassword: password
  mongodbRootPassword: password
  mongodbMetricsPassword: password
  mongodbReplicaSetKey: password

  ## Secrets for Geetest
  geetestId: id
  geetestSecretKey: key

  ## Secret for JWT
  jwtSecret: CHANGE-ME-PLS

  ## Secret for Apollo
  apolloId: id
  apolloKey: key

  ## Secret for Twilio
  twilioPhoneNumber: 99999999
  twilioAccountSid: sid
  twilioAuthToken: token

  ## Secrets for BitcoinD
  bitcoindRpcPassword: password

  ## Secrets for LND1
  lnd1Macaroon: macaroon
  lnd1Tls: tls
  lnd1PubKey: key

  ## Secrets for LND2
  lnd2Macaroon: macaroon
  lnd2Tls: tls
  lnd2PubKey: key

## Tracing details
##
tracing:
  ## Jaeger Tracing Host
  ##
  jaegerHost: localhost


###### --------------------------- OLDER CONTENTS -------------------------------

global:
  network: mainnet # todo: this should be injected in a configmap from bitcoind
bitcoind:
  port: 8332
lnd1: {}
lnd2: {}
ca:
  CAEmail: dev@galoy.io
image:
  repository: us.gcr.io/galoy-org/galoy-app
  digest: "sha256:84600005d2b00d17c1265abe4ab04af5fbc95568289b37b8eb0332b15f1a23a3"
  git_ref: "58ea311" # Not used by helm
mongodbMigrateImage:
  repository: us.gcr.io/galoy-org/galoy-app-migrate
  digest: "sha256:c83bafdb80cc5c39b8bb09cfe20339cdbe9e0967dc7978029a87884d1ed1431e"
jaegerHost: localhost
tracingPrefix: "galoy"
deployment:
  - name: graphql-admin
    appEntrypoint: "lib/servers/graphql-admin-server.js"
    healthz: true
    targetPort: 4001
    replicaCount: 1
  - name: exporter
    appEntrypoint: "lib/servers/exporter.js"
    healthz: true
    targetPort: 3000
    replicaCount: 1
    podAnnotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "3000"
      prometheus.io/scrape: "true"
  - name: trigger
    appEntrypoint: "lib/servers/trigger.js"
    healthz: true
    targetPort: 8888
    replicaCount: 1
    timeoutSeconds: 30
    # cpu request: 0.001
service:
  - name: graphql
    type: NodePort
    targetPort: 4000
    port: 4000
  - name: graphql-admin
    type: NodePort
    targetPort: 4001
    port: 4001
  - name: api
    type: NodePort
    targetPort: 4002
    port: 4002
  - name: trigger
    type: ClusterIP
    targetPort: 8888
    port: 8888
cron:
  - name: cronjob
    appEntrypoint: "lib/servers/cron.js"
    schedule: "0 2 * * *"
  - name: balance-notif
    appEntrypoint: "lib/servers/daily-balance-notification.js"
    schedule: "0 14 * * *"
mongobackup:
  bucketName: galoy-staging-backups
  mongoToolsVersion: 4.2.14-r6
  image:
    repository: us.gcr.io/galoy-org/mongo-backup
    digest: "sha256:4cfc197ea082ef3dae2d4321a9dfa31ef185f43d578a37a224095b75de656e6a"
    git_ref: 872b70e
loglevel: debug
needFirebaseServiceAccount: true
twilio: true
# value can be set here, or override with helm,
# ie: helm upgrade -i --set twilio.TWILIO_PHONE_NUMBER=6505550001,TWILIO_ACCOUNT_SID=AKBQWN...
# twilio:
#   TWILIO_PHONE_NUMBER: "phone"
#   TWILIO_ACCOUNT_SID: "sid"
#   TWILIO_AUTH_TOKEN: "authtoken"
mongodbaddress: "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
mongodb:
  initdbScripts:
    grant_user_admin_role.sh: |
      isMaster=$(mongo admin -u root -p "$MONGODB_ROOT_PASSWORD" --eval "rs.isMaster().ismaster" | tail -1 | tr -d '\n')
      if [ "$isMaster" == "true" ]; then
      mongo admin -u root -p $MONGODB_ROOT_PASSWORD << EOF
        use admin;
        db.grantRolesToUser('root', [ {role: "userAdmin", db: "galoy"} ]);
      EOF
      fi;
  architecture: replicaset
  auth:
    existingSecret: galoy-mongodb
    usernames: [testGaloy]
    databases: [galoy]
  labels:
    kube-monkey/enabled: enabled
    kube-monkey/identifier: mongodb
    kube-monkey/kill-mode: fixed
    kube-monkey/kill-value: "1"
    kube-monkey/mtbf: "8"
  podLabels:
    kube-monkey/enabled: enabled
    kube-monkey/identifier: mongodb
  replicaCount: 3
  persistence:
    enabled: true
  arbiter:
    enabled: false
  readinessProbe:
    enabled: false
  customReadinessProbe:
    exec:
      command:
        - mongo
        - --disableImplicitSessions
        - --eval
        - "db.adminCommand('ping')"
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  ## Prometheus Exporter / Metrics
  ## TODO: Could be useful for having mongo metrics
  metrics:
    enabled: true
## Warning: Setting this to true will disable automatic mongodb backups
## It is only intended for use in development environments
devDisableMongoBackup: false
dealer_price:
  host: dealer-price.namespace.svc.cluster.local
  port: 50055
price:
  history:
    postgresqlHost: galoy-postgresql
    host: galoy-price-history
    port: 50052
postgresql:
  enabled: true
  auth:
    enablePostgresUser: false
    username: price-history
    database: price-history
    existingSecret: galoy-price-history-postgres-creds

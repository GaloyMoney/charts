## Default values for Galoy Helm Chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Provide a name in place of `galoy` for `app:` labels
##
nameOverride:
## Provide a name to substitute for the full names of resources
##
fullnameOverride:
galoy:
  ## Bitcoin Network to run this Galoy instance on
  ##
  network: mainnet
  ## Application Custom Config
  ## Ref: https://github.com/GaloyMoney/galoy/blob/main/default.yaml
  ##
  config:
    ## Default Galoy Wallet Name
    name: Galoy Wallet
    ## Apollo Configuration
    apollo:
      playground: false
    oathkeeperConfig:
      urlJkws: "http://galoy-oathkeeper-api:4456/.well-known/jwks.json"
      decisionsApi: "http://galoy-oathkeeper-api:4456/decisions/"
  ## Docker Images for running Galoy Banking Codebase
  ##
  images:
    ## Galoy Application Image details
    ##
    app:
      ## Has api, trigger and exporter
      ##
      repository: us.gcr.io/galoy-org/galoy-app
      ## Digest of the image
      ##
      digest: "sha256:3401aa9eed2590b5ad4a2e0edb3163516bcdd9974af7d20844753b6b3d4ab60b"
      ## Not used by Helm, just used to ref to the source https://github.com/GaloyMoney/galoy.git
      ## Reference for timestamping the corresponding docker image and used by internal CI.
      ##
      git_ref: "d085443"
    ## Galoy Application MongoDB Migration Image details
    ##
    mongodbMigrate:
      ## Has mongodb migration
      ##
      repository: us.gcr.io/galoy-org/galoy-app-migrate
      ## Digest of the image
      ##
      digest: "sha256:8d4f208792c944a89f975889c8c18a17e047d52479ce0b86814f146140f03253"
    ## Galoy Application MongoDB Backup Image details
    ##
    mongoBackup:
      ## Has mongodb backup
      ##
      repository: us.gcr.io/galoy-org/mongo-backup
      ## Digest of the image
      digest: "sha256:4cfc197ea082ef3dae2d4321a9dfa31ef185f43d578a37a224095b75de656e6a"
      ## Not used by Helm, just used to ref to the source https://github.com/GaloyMoney/galoy.git
      ## Reference for timestamping the corresponding docker image and used by internal CI.
      ##
      git_ref: "872b70e"
  ## Configuration values for Galoy API components.
  ##
  api:
    ## Override the components name (defaults to api).
    ##
    nameOverride:
    ## Number of replicas.
    ##
    replicas: 2
    ## Log Level
    ##
    logLevel: debug
    ## Port on which API Server is running
    ##
    port: 4002
    ## Service type
    ##
    serviceType: NodePort
    ## Ingress configuration.
    ## Ref: https://kubernetes.io/docs/user-guide/ingress/
    ##
    ingress:
      ## Enable Ingress.
      ##
      enabled: false
      ## Ingress Host
      ##
      host: api.staging.galoy.io
      ## Cluster Issuer (Default: LetsEncrypt Certificate Isser defined at galoy-infra)
      ## Read More: https://cert-manager.io/docs/usage/ingress/
      ##
      clusterIssuer: letsencrypt-issuer
      ## TLS Secret Name
      ##
      tlsSecretName: api-ingress-tls
    ## Firebase Notifications Configuration
    ## It would need a Firebase Service Account to send out notifications
    ##
    firebaseNotifications:
      # Enable/disable notifications on the app
      enabled: false
      # Firebase Notifications Service Account must be injected via a secret
      existingSecret:
        ## Secret Name of the Service Account JSON
        name: galoyapp-firebase-serviceaccount
        # Secret Key
        key: galoyapp-firebase-serviceaccount.json
    ## Liveness/Readiness Probes Configuration
    ## Determines if pod is healthy or if it should be killed.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    probes:
      ## Enable/disable API probes for healthcheck
      enabled: true
      ## If pod is starting up/healthy
      liveness:
        initialDelaySeconds: 60
        periodSeconds: 10
        failureThreshold: 5
        timeoutSeconds: 1
      ## When to expose the pod to the service
      readiness:
        initialDelaySeconds: 5
        failureThreshold: 5
        successThreshold: 2
        timeoutSeconds: 1
  ## Configuration values for Trigger components.
  ##
  trigger:
    ## Override the components name (defaults to trigger).
    ##
    nameOverride:
    ## Number of replicas.
    ##
    replicas: 1
    ## Log Level
    ##
    logLevel: debug
    ## Port on which Exporter Server is running
    ##
    port: 8888
    ## Service type
    ##
    serviceType: ClusterIP
    ## Liveness/Readiness Probes Configuration
    ## Determines if pod is healthy or if it should be killed.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    probes:
      ## Enable/disable Admin API probes for healthcheck
      enabled: true
      ## If pod is starting up/healthy
      liveness:
        initialDelaySeconds: 60
        periodSeconds: 10
        failureThreshold: 5
        timeoutSeconds: 1
      ## When to expose the pod to the service
      readiness:
        initialDelaySeconds: 5
        failureThreshold: 5
        successThreshold: 2
        timeoutSeconds: 1
    ## Galoy database backup configuration
    ## This is a custom backup configuration, which means data lying in
    ## MongoDB and LND can be backed up by custom scripts present in the
    ## galoy codebase itself.
    ##
    backups:
      ## Backup data to Google Cloud Storage Bucket
      ## To backup to GCS bucket, you would need a GCP Service Account
      ## that lets you upload to a specific bucket
      ##
      gcs:
        # Enable/disable uploading backup to GCS bucket
        enabled: false
        # GCS bucket name to upload to (it should already be created)
        bucketName: gcs-bucket-name
        # Service account to use to upload backup to above-mentioned bucket
        # Service account credentials json file must be injected via a secret
        serviceAccountExistingSecret:
          # Secret name
          name: gcs-sa-key
          # Secret Key
          key: gcs-sa-key.json
      ## Backup data to Dropbox
      ## To backup to dropbox, you would need an access token to upload
      ## data to your dropbox account
      ##
      dropbox:
        # Enable/disable uploading backup to dropbox
        enabled: false
        # Dropbox Access Token must be injected via a secret
        accessTokenExistingSecret:
          # Secret Name
          name: dropbox-access-token
          # Secret Key
          key: token
  ## Configuration values for Galoy Admin components.
  ##
  admin:
    ## Override the components name (defaults to admin).
    ##
    nameOverride:
    ## Number of replicas.
    ##
    replicas: 1
    ## Log Level
    ##
    logLevel: debug
    ## Port on which Admin API Server is running
    ##
    port: 4001
    ## Service type
    ##
    serviceType: NodePort
    ## Ingress configuration.
    ## Ref: https://kubernetes.io/docs/user-guide/ingress/
    ##
    ingress:
      ## Enable Ingress.
      ##
      enabled: false
      ## Ingress Host
      ##
      host: admin.staging.galoy.io
      ## Cluster Issuer (Default: LetsEncrypt Certificate Isser defined at galoy-infra)
      ## Read More: https://cert-manager.io/docs/usage/ingress/
      ##
      clusterIssuer: letsencrypt-issuer
      ## TLS Secret Name
      ##
      tlsSecretName: graphql-admin-tls
    ## Liveness/Readiness Probes Configuration
    ## Determines if pod is healthy or if it should be killed.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    probes:
      ## Enable/disable Admin API probes for healthcheck
      enabled: true
      ## If pod is starting up/healthy
      liveness:
        initialDelaySeconds: 60
        periodSeconds: 10
        failureThreshold: 5
        timeoutSeconds: 1
      ## When to expose the pod to the service
      readiness:
        initialDelaySeconds: 5
        failureThreshold: 5
        successThreshold: 2
        timeoutSeconds: 1
  ## Configuration values for Galoy Metrics Exporter components.
  ##
  exporter:
    ## Override the components name (defaults to admin).
    ##
    nameOverride:
    ## Number of replicas.
    ##
    replicas: 1
    ## Log Level
    ##
    logLevel: debug
    ## Port on which Exporter Server is running
    ##
    port: 3000
    ## Liveness/Readiness Probes Configuration
    ## Determines if pod is healthy or if it should be killed.
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    ##
    probes:
      ## Enable/disable Admin API probes for healthcheck
      enabled: true
      ## If pod is starting up/healthy
      liveness:
        initialDelaySeconds: 60
        periodSeconds: 10
        failureThreshold: 5
        timeoutSeconds: 1
      ## When to expose the pod to the service
      readiness:
        initialDelaySeconds: 5
        failureThreshold: 5
        successThreshold: 2
        timeoutSeconds: 1
  balanceNotificationCron:
    enabled: false
  ## Kratos
  kratos:
    existingSecret:
      name: kratos-secret
      master_user_password: master_user_password
      callback_api_key: callback_api_key
  ## Configuration values for establishing connection to LND-1
  ## TODO: This should be injected as ConfigMap from LND Chart
  ##
  lnd1:
    ## DNS for LND1
    ##
    dns: lnd1.default.svc.cluster.local
    ## Credentials to access LND RPC
    ##
    credentialsExistingSecret:
      ## Secret Name
      name: lnd1-credentials
      ## Macaroon Key
      macaroon_key: admin_macaroon_base64
      ## TLS Key
      tls_key: tls_base64
    ## Pubkey to verify LND RPC
    ##
    pubkeyExistingSecret:
      ## Secret Name
      name: lnd1-pubkey
      ## Secret Key
      key: pubkey
    ## Loop Credentials
    ##
    loopCredentialsExistingSecret:
      ## Secret Name
      name: loop1-credentials
      ## Macaroon Key
      macaroon_key: loop_macaroon_base64
      ## TLS Key
      tls_key: tls_base64
  ## Configuration values for establishing connection to LND-2
  ## TODO: This should be injected as ConfigMap from LND Chart
  ##
  lnd2:
    ## DNS for LND2
    ##
    dns: lnd2.default.svc.cluster.local
    ## Credentials to access LND RPC
    ##
    credentialsExistingSecret:
      ## Secret Name
      name: lnd2-credentials
      ## Macaroon Key
      macaroon_key: admin_macaroon_base64
      ## TLS Key
      tls_key: tls_base64
    ## Pubkey to verify LND RPC
    ##
    pubkeyExistingSecret:
      ## Secret Name
      name: lnd2-pubkey
      ## Secret Key
      key: pubkey
    ## Loop Credentials
    ##
    loopCredentialsExistingSecret:
      ## Secret Name
      name: loop2-credentials
      ## Macaroon Key
      macaroon_key: loop_macaroon_base64
      ## TLS Key
      tls_key: tls_base64
  ## Configuration values for establishing connection to BITCOIND
  ## TODO: This should be injected as ConfigMap from Bitcoin Chart
  ##
  bitcoind:
    ## DNS for bitcoind
    dns: bitcoind.default.svc.cluster.local
    ## Port on which bitcoind is running
    port: 8332
    ## RPC Password Secret
    ##
    rpcPasswordExistingSecret:
      ## Secret Name
      name: bitcoind-rpcpassword
      ## Secret Key
      key: password
  ## Dealer Service Connection details
  ##
  dealer:
    ## Dealer Service Host
    host: dealer-price.default.svc.cluster.local
    ## Dealer Service Port
    port: 3325
  ## Geetest Configuration
  ##
  geetestExistingSecret:
    # Secret Name
    name: geetest-key
    # Geetest ID Secret Key
    id_key: id
    # Geetest Key Secret Key
    secret_key: key
  ## JsonWebToken Secret
  ##
  jwtSecretExistingSecret:
    # Secret Name
    name: jwt-secret
    # Secret Key
    key: secret
  ## Twilio Configuration
  ##
  twilioExistingSecret:
    # Secret Name
    name: twilio-secret
    # Twilio Verify Service Account
    verify_service_id: TWILIO_VERIFY_SERVICE_ID
    # Twilio Account ID
    account_sid_key: TWILIO_ACCOUNT_SID
    # Twilio Authentication Token
    auth_token_key: TWILIO_AUTH_TOKEN
# Configuration values for the mongodb dependency.
# Ref: https://artifacthub.io/packages/helm/bitnami/mongodb/
#
# This is a necessary component and without the database, the chart will not work.
# Therefore it doesn't have any enable/disable flag.
#
mongodb:
  # Authentication Configuration
  auth:
    # Existing secret for authentication
    # This secret gets autogenerated if secrets.create is set to true.
    #
    existingSecret: galoy-mongodb
    # Username to be used for Galoy
    # Autocreated at MongoDB initialization
    #
    # There should be one and only one username in the array here.
    #
    usernames: [testGaloy]
    # Database to be used for Galoy
    # Autocreated at MongoDB initialization
    #
    # There should be one and only one database in the array here.
    #
    databases: [galoy]
  # Replicaset for no-downtime
  #
  architecture: replicaset
  # Replicas for MongoDB
  #
  replicaCount: 3
  persistence:
    enabled: true
  arbiter:
    enabled: false
  initdbScripts:
    grant_user_admin_role.sh: |
      isMaster=$(mongo admin -u root -p "$MONGODB_ROOT_PASSWORD" --eval "rs.isMaster().ismaster" | tail -1 | tr -d '\n')
      if [ "$isMaster" == "true" ]; then
      mongo admin -u root -p $MONGODB_ROOT_PASSWORD << EOF
        use admin;
        db.grantRolesToUser('root', [ {role: "userAdmin", db: "galoy"} ]);
      EOF
      fi;
  # Kube Monkey Labels
  labels:
    kube-monkey/enabled: enabled
    kube-monkey/identifier: mongodb
    kube-monkey/kill-mode: fixed
    kube-monkey/kill-value: "1"
    kube-monkey/mtbf: "8"
  podLabels:
    kube-monkey/enabled: enabled
    kube-monkey/identifier: mongodb
  # Probes
  readinessProbe:
    enabled: false
  customReadinessProbe:
    exec:
      command:
        - mongo
        - --disableImplicitSessions
        - --eval
        - "db.adminCommand('ping')"
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  # Prometheus metrics
  metrics:
    enabled: true
## Configuration values for the redis dependency.
## Ref: https://artifacthub.io/packages/helm/bitnami/redis/
##
## This is a necessary component and without the cache, the chart will not work.
## Therefore it doesn't have any enable/disable flag.
##
redis:
  ## Redis replica config params
  replica:
    # Number of Redis to deploy
    replicaCount: 3
  ## Redis master config params
  master:
    persistence:
      enabled: true
  ## Redis auth config params
  auth:
    existingSecret: galoy-redis-pw
    existingSecretPasswordKey: redis-password
  ## Use sentinel on Redis pods
  sentinel:
    enabled: true
    ## Master set name
    masterSet: mymaster
  ## Sidecar prometheus exporter
  metrics:
    enabled: true
## For managing secrets using Helm
## Set the values if you'd want to make it configurable
##
secrets:
  ## Create the secret resource from the following values. Set this to false
  ## to manage these secrets outside Helm.
  ##
  create: true
  ## Secrets for MongoDB
  mongodbPassword:
  mongodbRootPassword:
  mongodbMetricsPassword:
  mongodbReplicaSetKey:
  ## Secrets for Redis
  redisPassword:
  ## Secrets for PostgreSQL
  postgresPassword:
  ## Secrets for Geetest
  geetestId:
  geetestSecretKey:
  ## Secret for JWT
  jwtSecret:
  ## Secret for Twilio
  twilioVerifyService:
  twilioAccountSid:
  twilioAuthToken:
  ## Bitcoin RPC password
  bitcoindRpcPassword:
  ## Secrets for LND1
  lnd1Macaroon:
  lnd1Tls:
  lnd1LoopMacaroon:
  lnd1LoopTls:
  lnd1PubKey:
  ## Secrets for LND2
  lnd2Macaroon:
  lnd2Tls:
  lnd2LoopMacaroon:
  lnd2LoopTls:
  lnd2PubKey:
  ## Secret for Galoy app
  kratosMasterUserPassword:
  kratosCallbackApiKey:
## Tracing details
##
tracing:
  ## Jaeger Tracing Host
  ##
  jaegerHost: localhost
  ## Prefix for tracing
  ##
  prefix: galoy-dev
price:
  host: galoy-price-history
  port: 50052
  history:
    postgresqlHost: galoy-postgresql
    host: galoy-price-history
    port: 50052
postgresql:
  enabled: true
  auth:
    enablePostgresUser: false
    username: price-history
    database: price-history
    existingSecret: galoy-price-history-postgres-creds
loop:
  enabled: true
oathkeeper:
  image:
    repository: ntheile/oathkeeper
    tag: v0.40.1
  replicaCount: 2
  oathkeeper:
    config:
      log:
        level: debug
      authenticators:
        bearer_token:
          enabled: true
          config:
            check_session_url: http://api:4002/auth/validatetoken
        anonymous:
          enabled: true
          config:
            subject: anon
        cookie_session:
          enabled: true
          config:
            check_session_url: http://galoy-kratos-public:80/sessions/whoami
            preserve_path: true
            subject_from: identity.id
            extra_from: identity.traits
        unauthorized:
          enabled: true
      authorizers:
        allow:
          enabled: true
      mutators:
        noop:
          enabled: true
        id_token:
          enabled: true
          config:
            jwks_url: "http://galoy-oathkeeper-api:4456/.well-known/jwks.json"
            issuer_url: "galoy.io"
        header:
          enabled: true
          config:
            headers:
              orgauthorization: '{{ .MatchContext.Header.Get "Authorization" }}' # tmp during migration of LegacyJWT
      errors:
        fallback:
          - json
        handlers:
          json:
            enabled: true
            config:
              verbose: true
      access_rules:
        matching_strategy: regexp
    mutatorIdTokenJWKs: "http://galoy-oathkeeper-api:4456/.well-known/jwks.json"
    accessRules: |
      [
        {
          "id": "decline-direct-access-validatetoken",
          "upstream": { "url": "http://api:4002" },
          "match": {
            "url": "<(http|https)>://<[a-zA-Z0-9-.:]+>/auth/validatetoken",
            "methods": ["GET", "POST"]
          },
          "authenticators": [{ "handler": "unauthorized" }],
          "authorizer": { "handler": "allow" },
          "mutators": [{ "handler": "noop" }]
        },
        {
          "id": "cookie-anonymous-routes",
          "upstream": { "url": "http://api:4002" },
          "match": {
            "url": "<(http|https)>://<[a-zA-Z0-9-.:]+>/auth/clearCookies",
            "methods": ["GET", "POST", "OPTIONS"]
          },
          "authenticators": [{ "handler": "anonymous" }],
          "authorizer": { "handler": "allow" },
          "mutators": [{ "handler": "noop" }]
        },
        {
          "id": "cookie-auth-routes",
          "upstream": { "url": "http://api:4002" },
          "match": {
            "url": "<(http|https)>://<[a-zA-Z0-9-.:]+>/auth/<(login|logout)>",
            "methods": ["GET", "POST", "OPTIONS"]
          },
          "authenticators": [
            {
              "handler": "cookie_session",
              "config": {
                "check_session_url": "http://galoy-kratos-public:80/sessions/whoami",
                "preserve_path": true,
                "preserve_query": true,
                "subject_from": "identity.id",
                "extra_from": "identity.traits"
              }
            },
            { "handler": "anonymous" }
          ],
          "authorizer": { "handler": "allow" },
          "mutators": [{ "handler": "noop" }]
        },
        {
          "id": "apollo-playground-ui",
          "upstream": {
            "url": "http://api:4002"
          },
          "match": {
            "url": "<(http|https)>://<[a-zA-Z0-9-.:]+>/graphql",
            "methods": ["GET", "OPTIONS"]
          },
          "authenticators": [{ "handler": "anonymous" }],
          "authorizer": { "handler": "allow" },
          "mutators": [
            {
              "handler": "header",
              "config": {
                "headers": {
                  "orgauthorization": "{{ .MatchContext.Header.Get \"Authorization\" }}"
                }
              }
            },
            {
              "handler": "id_token",
              "config": {
                "claims": "{\"sub\": \"{{ print .Subject }}\"}"
              }
            }
          ]
        },
        {
          "id": "galoy-backend",
          "upstream": {
            "url": "http://api:4002"
          },
          "match": {
            "url": "<(http|https)>://<[a-zA-Z0-9-.:]+>/graphql<.*>",
            "methods": [ "POST" ]
          },
          "authenticators": [
            {
              "handler": "cookie_session",
              "config": {
                "check_session_url": "http://galoy-kratos-public:80/sessions/whoami",
                "preserve_path": true,
                "preserve_query": true,
                "subject_from": "identity.id",
                "extra_from": "identity.traits"
              }
            },
            {
              "handler": "bearer_token",
              "config": {
                "check_session_url": "http://api:4002/auth/validatetoken",
                "preserve_path": true,
                "preserve_query": true,
                "subject_from": "sub"
              }
            },
            { "handler": "anonymous" }
          ],
          "authorizer": { "handler": "allow" },
          "mutators": [
            {
              "handler": "header",
              "config": {
                "headers": {
                  "orgauthorization": "{{ .MatchContext.Header.Get \"Authorization\" }}"
                }
              }
            },
            {
              "handler": "id_token",
              "config": {
                "claims": "{\"sub\": \"{{ print .Subject }}\"}"
              }
            }
          ]
        },
        {
          "id": "galoy-backend-middleware-routes",
          "upstream": {
            "url": "http://api:4002"
          },
          "match": {
            "url": "<(http|https)>://<[a-zA-Z0-9-.:]+>/<(kratos|browser|healthz|metrics)(.*)>",
            "methods": ["GET", "POST", "OPTIONS"]
          },
          "authenticators": [
            {
              "handler": "cookie_session",
              "config": {
                "check_session_url": "http://galoy-kratos-public:80/sessions/whoami",
                "preserve_path": true,
                "preserve_query": true,
                "subject_from": "identity.id",
                "extra_from": "identity.traits"
              }
            },
            {
              "handler": "bearer_token",
              "config": {
                "check_session_url": "http://api:4002/auth/validatetoken",
                "preserve_path": true,
                "preserve_query": true,
                "subject_from": "sub"
              }
            },
            { "handler": "anonymous" }
          ],
          "authorizer": {
            "handler": "allow"
          },
          "mutators": [
            {
              "handler": "id_token",
              "config": { "claims": '{"sub": "{{ print .Subject }}"}' }
            },
            {
              "handler": "header",
              "config": {
                "headers": {
                  "orgauthorization": '{{ .MatchContext.Header.Get "Authorization" }}'
                }
              }
            }
          ]
        },
        {
          "id": "admin-backend",
          "upstream": {
            "url": "http://graphql-admin:4001",
            "strip_path": "/admin"
          },
          "match": {
            "url": "<(http|https)>://<.*><[0-9]*>/admin/<.*>",
            "methods": ["GET", "POST", "OPTIONS"]
          },
          "authenticators": [
            {
              "handler": "cookie_session",
              "config": {
                "check_session_url": "http://galoy-kratos-public:80/sessions/whoami",
                "preserve_path": true,
                "preserve_query": true,
                "subject_from": "identity.id",
                "extra_from": "identity.traits"
              }
            },
            {
              "handler": "bearer_token",
              "config": {
                "check_session_url": "http://graphql-admin:4001/auth/validatetoken",
                "preserve_path": true,
                "preserve_query": true,
                "subject_from": "sub"
              }
            },
            { "handler": "anonymous" }
          ],
          "authorizer": {
            "handler": "allow"
          },
          "mutators": [
            {
              "handler": "header",
              "config": {
                "headers": {
                  "orgauthorization": '{{ .MatchContext.Header.Get "Authorization" }}'
                }
              }
            },
            {
              "handler": "id_token",
              "config": { "claims": '{"sub": "{{ print .Subject }}"}' }
            }
          ]
        }
      ]
  maester:
    enabled: false
kratos:
  image:
    tag: v0.11.1
  ingress:
    admin:
      enabled: false
    public:
      enabled: false
  replicaCount: 2
  kratos:
    automigration:
      enabled: true
    config:
      secrets:
        default:
          - PLEASE-CHANGE-ME-I-AM-VERY-INSECURE
      version: v0.11.0
      dsn: postgresql://kratos-pg:kratos-pg@postgresql/kratos-pg
      serve:
        public:
          base_url: http://galoy-kratos-public:80/
          cors:
            enabled: true
            allow_credentials: true
            allowed_methods:
              - POST
              - GET
              - PUT
              - PATCH
              - DELETE
            allowed_headers:
              - Authorization
              - Cookie
              - Content-Type
              - X-Session-Token
            exposed_headers:
              - Content-Type
              - Set-Cookie
            debug: true
        admin:
          base_url: http://galoy-kratos-admin:80/
      selfservice:
        default_browser_return_url: http://localhost:3000/
        methods:
          oidc:
            enabled: false
          webauthn:
            enabled: false
          totp:
            enabled: true
          password:
            enabled: true
          code:
            enabled: true
            config:
              # Defines how long the verification or the recovery code is valid for (default 1h)
              lifespan: 15m
        flows:
          error:
            ui_url: http://api:4002/error
          settings:
            ui_url: http://api:4002/settings
            privileged_session_max_age: 15m
            required_aal: aal1
            after:
              profile:
                hooks:
                  - hook: web_hook
                    config:
                      # url: http://e2e-tests:4002/auth/after_settings_hooks
                      url: http://invalid-because-we-dont-want-profile-to-be-updated
                      method: POST
                      body: base64://ZnVuY3Rpb24oY3R4KSB7CiAgICBpZGVudGl0eV9pZDogaWYgc3RkLm9iamVjdEhhcyhjdHgsICJpZGVudGl0eSIpIHRoZW4gY3R4LmlkZW50aXR5LmlkIGVsc2UgbnVsbCwKICAgIHBob25lOiBpZiBzdGQub2JqZWN0SGFzKGN0eC5pZGVudGl0eS50cmFpdHMsICJwaG9uZSIpIHRoZW4gY3R4LmlkZW50aXR5LnRyYWl0cy5waG9uZSBlbHNlIG51bGwsCiAgICBlbWFpbDogaWYgc3RkLm9iamVjdEhhcyhjdHguaWRlbnRpdHkudHJhaXRzLCAiZW1haWwiKSB0aGVuIGN0eC5pZGVudGl0eS50cmFpdHMuZW1haWwgZWxzZSBudWxsLAogICAgc2NoZW1hX2lkOiBjdHguaWRlbnRpdHkuc2NoZW1hX2lkLAogICAgZmxvd19pZDogY3R4LmZsb3cuaWQsCiAgICBmbG93X3R5cGU6IGN0eC5mbG93LnR5cGUKfQ==
                      auth:
                        type: api_key
                        config:
                          name: Authorization
                          value: callback_api_key
                          in: header
          recovery:
            enabled: true
            ui_url: http://api:4002/recovery
          verification:
            use: code
            enabled: true
          logout:
            after:
              default_browser_return_url: http://api:4002/login
          login:
            ui_url: http://localhost:3000/login
            lifespan: 10m
            # this below make phone authentication fails even if there is no email in the schema
            # after:
            #   password:
            #     hooks:
            #     - hook: require_verified_address
          registration:
            lifespan: 10m
            ui_url: http://localhost:3000/register
            after:
              password:
                hooks:
                  - hook: web_hook
                    config:
                      url: http://api:4002/kratos/registration
                      method: POST
                      can_interrupt: true
                      body: "base64://ZnVuY3Rpb24oY3R4KSB7CiAgICBpZGVudGl0eV9pZDogaWYgc3RkLm9iamVjdEhhcyhjdHgsICJpZGVudGl0eSIpIHRoZW4gY3R4LmlkZW50aXR5LmlkIGVsc2UgbnVsbCwKICAgIHBob25lOiBpZiBzdGQub2JqZWN0SGFzKGN0eC5pZGVudGl0eS50cmFpdHMsICJwaG9uZSIpIHRoZW4gY3R4LmlkZW50aXR5LnRyYWl0cy5waG9uZSBlbHNlIG51bGwsCiAgICBlbWFpbDogaWYgc3RkLm9iamVjdEhhcyhjdHguaWRlbnRpdHkudHJhaXRzLCAiZW1haWwiKSB0aGVuIGN0eC5pZGVudGl0eS50cmFpdHMuZW1haWwgZWxzZSBudWxsLAogICAgc2NoZW1hX2lkOiBjdHguaWRlbnRpdHkuc2NoZW1hX2lkLAogICAgZmxvd19pZDogY3R4LmZsb3cuaWQsCiAgICBmbG93X3R5cGU6IGN0eC5mbG93LnR5cGUKfQ=="
                      auth:
                        type: api_key
                        config:
                          name: Authorization
                          value: callback_api_key
                          in: header
                  - hook: session
      log:
        level: debug
        format: json
        leak_sensitive_values: true
      ciphers:
        algorithm: xchacha20-poly1305
      hashers:
        algorithm: bcrypt
        bcrypt:
          cost: 8
      identity:
        schemas:
          - id: phone_or_email_password_v0
            url: file:///etc/config/identity.schema.json
        default_schema_id: phone_or_email_password_v0
      courier:
        smtp:
          connection_uri: smtps://test:test@mailslurper:1025/?skip_ssl_verify=true
      session:
        lifespan: "720h" # 1 month
        earliest_possible_extend: "96h" # 4 days
        whoami:
          required_aal: aal1
    identitySchemas:
      "identity.schema.json": |
        {
          "$id": "https://schemas.ory.sh/presets/kratos/quickstart/phone-no-password/identity.schema.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "PhoneOrEmailPassword",
          "type": "object",
          "properties": {
            "traits": {
              "type": "object",
              "properties": {
                "phone": {
                  "type": "string",
                  "format": "string",
                  "title": "phone",
                  "minLength": 3,
                  "ory.sh/kratos": {
                    "credentials": {
                      "password": {
                        "identifier": true
                      }
                    }
                  }
                },
                "email": {
                  "title": "E-Mail",
                  "type": "string",
                  "format": "email",
                  "minLength": 3,
                  "ory.sh/kratos": {
                    "credentials": {
                      "password": {
                        "identifier": true
                      }
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          }
        }

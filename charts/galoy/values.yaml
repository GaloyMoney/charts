global:
  network: mainnet
galoy:
  name: "Galoy Wallet"
  apollo:
    playground: false
# todo: this should be injected in a configmap from bitcoind
bitcoind:
  port: 8332
lnd1: {}
lnd2: {}
ca:
  CAEmail: dev@galoy.io
image:
  repository: us.gcr.io/galoy-org/galoy-app
  digest: "sha256:8004bf62bfd00e7246973599ce5eb2d88404863a0bbd1ea17df8265c0115cdd7"
  git_ref: "315d670" # Not used by helm
mongodbMigrateImage:
  repository: us.gcr.io/galoy-org/galoy-app-migrate
  digest: "sha256:42f2de7f59510237039b9b999442f840ab8523a39f5b8f369de80270add675d5"
jaegerHost: localhost
tracingPrefix: "galoy"
deployment:
  - name: graphql
    appEntrypoint: "lib/servers/graphql-old-server.js"
    healthz: true
    targetPort: 4000
    replicaCount: 1
    podAnnotations: {}
  - name: graphql-admin
    appEntrypoint: "lib/servers/graphql-admin-server.js"
    healthz: true
    targetPort: 4001
    replicaCount: 1
  - name: api
    command: /nodejs/bin/node
    appEntrypoint: "lib/servers/graphql-main-server.js"
    healthz: true
    targetPort: 4002
    replicaCount: 2
  - name: exporter
    appEntrypoint: "lib/servers/exporter.js"
    healthz: true
    targetPort: 3000
    replicaCount: 1
    podAnnotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "3000"
      prometheus.io/scrape: "true"
  - name: trigger
    appEntrypoint: "lib/servers/trigger.js"
    healthz: true
    targetPort: 8888
    replicaCount: 1
    timeoutSeconds: 30
    # cpu request: 0.001
service:
  - name: graphql
    type: NodePort
    targetPort: 4000
    port: 4000
  - name: graphql-admin
    type: NodePort
    targetPort: 4001
    port: 4001
  - name: api
    type: NodePort
    targetPort: 4002
    port: 4002
  - name: trigger
    type: ClusterIP
    targetPort: 8888
    port: 8888
cron:
  - name: cronjob
    appEntrypoint: "lib/servers/cron.js"
    schedule: "0 2 * * *"
  - name: balance-notif
    appEntrypoint: "lib/servers/daily-balance-notification.js"
    schedule: "0 14 * * *"
mongobackup:
  bucketName: galoy-staging-backups
  mongoToolsVersion: 4.2.9-r0
loglevel: debug
needFirebaseServiceAccount: true
twilio: true
# value can be set here, or override with helm,
# ie: helm upgrade -i --set twilio.TWILIO_PHONE_NUMBER=6505550001,TWILIO_ACCOUNT_SID=AKBQWN...
# twilio:
#   TWILIO_PHONE_NUMBER: "phone"
#   TWILIO_ACCOUNT_SID: "sid"
#   TWILIO_AUTH_TOKEN: "authtoken"
redis:
  master:
    persistence:
      enabled: true
  auth:
    password: password
  sentinel:
    enabled: true
  metrics:
    enabled: true
mongodbaddress: "galoy-mongodb-0.galoy-mongodb-headless,galoy-mongodb-1.galoy-mongodb-headless,galoy-mongodb-2.galoy-mongodb-headless"
mongodb:
  initdbScripts:
    grant_user_admin_role.sh: |
      isMaster=$(mongo admin -u root -p "$MONGODB_ROOT_PASSWORD" --eval "rs.isMaster().ismaster" | tail -1 | tr -d '\n')
      if [ "$isMaster" == "true" ]; then
      mongo admin -u root -p $MONGODB_ROOT_PASSWORD << EOF
        use admin;
        db.grantRolesToUser('root', [ {role: "userAdmin", db: "${MONGODB_DATABASE}"} ]);
      EOF
      fi;
  architecture: replicaset
  auth:
    existingSecret: galoy-mongodb
    username: testGaloy
    database: galoy
  labels:
    kube-monkey/enabled: enabled
    kube-monkey/identifier: mongodb
    kube-monkey/kill-mode: fixed
    kube-monkey/kill-value: "1"
    kube-monkey/mtbf: "8"
  podLabels:
    kube-monkey/enabled: enabled
    kube-monkey/identifier: mongodb
  replicaCount: 3
  persistence:
    enabled: true
  arbiter:
    enabled: false
  readinessProbe:
    enabled: false
  customReadinessProbe:
    exec:
      command:
        - mongo
        - --disableImplicitSessions
        - --eval
        - "db.adminCommand('ping')"
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  ## Prometheus Exporter / Metrics
  ## TODO: Could be useful for having mongo metrics
  metrics:
    enabled: true

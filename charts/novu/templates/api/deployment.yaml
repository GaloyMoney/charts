apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ printf "%s-%s" .Release.Name "api"  }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ printf "%s-%s" .Release.Name "api"  }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.api.autoscaling.enabled }}
  replicas: {{ .Values.api.replicaCount }}
  {{- end }}
  {{- if .Values.api.updateStrategy }}
  strategy: {{- toYaml .Values.api.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ printf "%s-%s" .Release.Name "api"  }}
  template:
    metadata:
      {{- if .Values.api.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.api.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: {{ printf "%s-%s" .Release.Name "api"  }}
        {{- if .Values.api.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.api.podLabels "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "novu.serviceAccountName" . }}
      {{- include "novu.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.api.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.api.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.api.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.api.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.api.podAffinityPreset "component" "novu-api" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.api.podAntiAffinityPreset "component" "novu-api" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.api.nodeAffinityPreset.type "key" .Values.api.nodeAffinityPreset.key "values" .Values.api.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.api.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.api.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.api.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.api.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.api.priorityClassName }}
      priorityClassName: {{ .Values.api.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.api.schedulerName }}
      schedulerName: {{ .Values.api.schedulerName | quote }}
      {{- end }}
      {{- if .Values.api.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.api.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.api.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.api.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.api.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.api.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.api.initContainers }}
      initContainers:
        {{- include "common.tplvalues.render" (dict "value" .Values.api.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: novu-api
          image: {{ template "novu-api.image" . }}
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          {{- if .Values.api.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.api.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.api.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.api.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.api.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.api.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: NODE_ENV
              value: {{print .Values.api.env.NODE_ENV | quote }}
            - name: API_ROOT_URL
              value : {{print  .Values.api.env.API_ROOT_URL | quote }}
            - name: DISABLE_USER_REGISTRATION
              value : {{print  .Values.api.env.DISABLE_USER_REGISTRATION | quote }}
            - name: PORT
              value : {{print  .Values.api.port | quote }}
            - name: FRONT_BASE_URL
              value : {{print  .Values.api.env.FRONT_BASE_URL | quote }}
            - name: MONGO_MIN_POOL_SIZE
              value : {{print  .Values.api.env.MONGO_MIN_POOL_SIZE | quote }}
            - name: MONGO_MAX_POOL_SIZE
              value : {{print  .Values.api.env.MONGO_MAX_POOL_SIZE | quote }}
            - name: REDIS_HOST
              value : "{{ include "novu.redis.host" .}}"
            - name: REDIS_PORT
              value : "{{ include "novu.redis.port" . }}"
            - name: REDIS_DB_INDEX
              value : "2"
            - name: REDIS_CACHE_SERVICE_HOST
              value : "{{ include "novu.redis.host" .}}"
            - name: REDIS_CACHE_SERVICE_PORT
              value : "{{ include "novu.redis.port" . }}"
            - name: REDIS_PASSWORD
              valueFrom :
                secretKeyRef:
                  name: {{ include "novu.redis.secretName" .}}
                  key: {{ include "novu.redis.passwordKey" .}}
            - name: REDIS_CACHE_PASSWORD
              valueFrom :
                secretKeyRef:
                  name: {{ include "novu.redis.secretName" .}}
                  key: {{ include "novu.redis.passwordKey" .}}
            - name: MONGO_URL
              valueFrom :
                secretKeyRef:
                  name: {{ include "novu.mongodb.secretName" .}}
                  key: mongoUrl
            - name: S3_BUCKET_NAME
              valueFrom :
                secretKeyRef:
                  name: {{ include "novu.s3.secretName" . }}
                  key: bucketName
            - name: S3_REGION
              valueFrom :
                secretKeyRef:
                  name: {{ include "novu.s3.secretName" . }}
                  key: region
            - name: AWS_ACCESS_KEY_ID
              valueFrom :
                secretKeyRef:
                  name: {{ include "novu.s3.secretName" . }}
                  key: accessKey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom :
               secretKeyRef:
                  name: {{ include "novu.s3.secretName" . }}
                  key: secretKey
            - name: JWT_SECRET
              valueFrom :
               secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: jwt-secret
            - name: STORE_ENCRYPTION_KEY
              valueFrom :
               secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: store-encryption-key
            {{- if .Values.api.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.api.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.api.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.api.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.api.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.api.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.api.resources }}
          resources: {{- toYaml .Values.api.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.api.port }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.api.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.api.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.api.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.api.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v1/health-check
              port: http
          {{- end }}
          {{- if .Values.api.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.api.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.api.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.api.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v1/health-check
              port: http
          {{- end }}
          {{- if .Values.api.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.api.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.api.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.api.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v1/health-check
              port: http
          {{- end }}
          {{- end }}
          {{- if .Values.api.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.api.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.api.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.api.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.api.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.api.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.api.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.api.extraVolumes "context" $) | nindent 8 }}
        {{- end }}

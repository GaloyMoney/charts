apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ printf "%s-%s" .Release.Name "ws"  }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ printf "%s-%s" .Release.Name "ws"  }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.ws.autoscaling.enabled }}
  replicas: {{ .Values.ws.replicaCount }}
  {{- end }}
  {{- if .Values.ws.updateStrategy }}
  strategy: {{- toYaml .Values.ws.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ printf "%s-%s" .Release.Name "ws"  }}
  template:
    metadata:
      {{- if .Values.ws.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.ws.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: {{ printf "%s-%s" .Release.Name "ws"  }}
        {{- if .Values.ws.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.ws.podLabels "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "novu.serviceAccountName" . }}
      {{- include "novu.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.ws.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.ws.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.ws.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.ws.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.ws.podAffinityPreset "component" "novu-ws" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.ws.podAntiAffinityPreset "component" "novu-ws" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.ws.nodeAffinityPreset.type "key" .Values.ws.nodeAffinityPreset.key "values" .Values.ws.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.ws.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.ws.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.ws.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.ws.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.ws.priorityClassName }}
      priorityClassName: {{ .Values.ws.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.ws.schedulerName }}
      schedulerName: {{ .Values.ws.schedulerName | quote }}
      {{- end }}
      {{- if .Values.ws.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.ws.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.ws.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.ws.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.ws.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.ws.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.ws.initContainers }}
      initContainers:
        {{- include "common.tplvalues.render" (dict "value" .Values.ws.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: novu-ws
          image: {{ template "novu-ws.image" . }}
          imagePullPolicy: {{ .Values.ws.image.pullPolicy }}
          {{- if .Values.ws.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.ws.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.ws.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.ws.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.ws.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.ws.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: NODE_ENV
              value : {{print .Values.api.env.NODE_ENV | quote }}
            - name: PORT
              value : {{print  .Values.ws.port | quote }}
            - name: MONGO_MIN_POOL_SIZE
              value : {{print  .Values.api.env.MONGO_MIN_POOL_SIZE | quote }}
            - name: MONGO_MAX_POOL_SIZE
              value : {{print  .Values.api.env.MONGO_MAX_POOL_SIZE | quote }}
            - name: REDIS_HOST
              value : {{ include "novu.redis.host" . | quote }}
            - name: REDIS_PORT
              value : {{ include "novu.redis.port" . | quote }}
            - name: REDIS_PASSWORD
              valueFrom :
                secretKeyRef:
                  name: {{ include "novu.redis.secretName" .}}
                  key: {{ include "novu.redis.passwordKey" .}}
            - name: MONGO_URL
              valueFrom :
                secretKeyRef:
                  name: {{ include "novu.mongodb.secretName" .}}
                  key: mongoUrl
            - name: JWT_SECRET
              valueFrom :
               secretKeyRef:
                  name: {{ include "common.names.fullname" . }}
                  key: jwt-secret
            {{- if .Values.ws.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.api.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.ws.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.ws.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.ws.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.ws.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.ws.resources }}
          resources: {{- toYaml .Values.ws.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.ws.port }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.ws.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ws.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.ws.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ws.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v1/health-check
              port: http
          {{- end }}
          {{- if .Values.ws.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ws.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.ws.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ws.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v1/health-check
              port: http
          {{- end }}
          {{- if .Values.ws.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ws.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.ws.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ws.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v1/health-check
              port: http
          {{- end }}
          {{- end }}
          {{- if .Values.ws.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.ws.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.ws.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.ws.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.ws.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.ws.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.ws.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.ws.extraVolumes "context" $) | nindent 8 }}
        {{- end }}

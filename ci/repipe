#!/bin/bash

set -e

if [[ $(which ytt) == "" ]]; then
  echo "You will need to install ytt to repipe. https://carvel.dev/ytt/"
  exit 1
fi

if [[ $(which yq) == "" ]]; then
  echo "You will need to install yq to repipe. https://github.com/mikefarah/yq"
  exit 1
fi

if [[ $(which helm) == "" ]]; then
  echo "You will need to install helm to repipe. https://helm.sh/"
  exit 1
fi

target="${FLY_TARGET:-galoy}"
team=dev

TMPDIR=""
TMPDIR=$(mktemp -d -t repipe.XXXXXX)
trap "rm -rf ${TMPDIR}" INT TERM QUIT EXIT

CIJOBS=$(mktemp /tmp/ci-jobs.XXXXXXX) || exit 1
CIRESOURCES=$(mktemp /tmp/ci-resources.XXXXXXX) || exit 1

cat <<EOF >$CIJOBS
#@ load("@ytt:data", "data")

#@ def pipeline_image():
#@   return data.values.docker_registry + "/galoy-deployments-pipeline"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end
EOF
cat $CIJOBS > $CIRESOURCES

echo "resources:" >> $CIRESOURCES
echo "jobs:" >> $CIJOBS

pushd charts > /dev/null

DEPS_DIR=$(mktemp -d -t deps.XXXXXX)

for d in */ ; do
  pushd $d > /dev/null
  TMPFILE=$(mktemp /tmp/helm-update.XXXXXXX) || exit 1

  helm dependency list | grep -v WARNING | tail -n +2 | awk '{ print $1, $3 }'> $TMPFILE

  if [[ $(cat $TMPFILE | grep \\.) == "" ]]; then
    popd > /dev/null
    continue
  fi

  while IFS="" read -r p || [ -n "$p" ]
  do
    dep=$(echo $p | cut -d' ' -f1)
    repo=$(echo $p | cut -d' ' -f2)

    if [[ $(echo $repo | grep http) == "" ]]; then continue; fi

    foldername=$(echo $DEPS_DIR/$dep-$(echo $repo | sha256sum | head -c 10))
    mkdir -p $foldername
    echo $d >> $foldername/folders

    echo $repo > $foldername/repo
    echo $dep > $foldername/dep

  done < $TMPFILE

  rm $TMPFILE
  popd > /dev/null
done

popd > /dev/null

pushd $DEPS_DIR > /dev/null

for d in */ ; do
  pushd $d > /dev/null

  dep=$(cat dep)
  repo=$(cat repo)

  cat <<EOF >> $CIRESOURCES
- name: helm-${dep}-resource
  type: helm
  source:
    repository: ${repo}
    dependency: ${dep}
EOF

  while read p; do
    dir="${p:0:-1}"

    cat <<EOF >> $CIJOBS
- name: bump-${dep}-${dir}-chart
  plan:
  - in_parallel:
    - get: helm-${dep}-resource
      trigger: true
    - get: charts-repo
    - get: pipeline-tasks
  - task: update-task
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: helm-${dep}-resource
        path: helm-resource
      - name: charts-repo
      - name: pipeline-tasks
      outputs:
      - name: helm-${dep}-resource
        path: helm-resource
      - name: charts-repo
      params:
        DEP: ${dep}
        DIR: ${dir}
      run:
        path: pipeline-tasks/ci/tasks/update-helm-dep.sh
  - put: update-helm-${dep}-${dir}-bot-branch
    params:
      repository: charts-repo
      branch: helm-${dep}-${dir}-bot-branch
      force: true
  - task: open-bump-pr
    config:
      platform: linux
      image_resource: #@ task_image_config()
      params:
        GH_TOKEN: #@ data.values.github_token
        BRANCH: #@ data.values.git_branch
        BOT_BRANCH: helm-${dep}-${dir}-bot-branch
        DEP: ${dep}
        DIR: ${dir}
      inputs:
      - name: pipeline-tasks
      - name: charts-repo
      run:
        path: pipeline-tasks/ci/tasks/open-update-helm-deps-pr.sh
EOF

    cat <<EOF >> $CIRESOURCES
- name: update-helm-${dep}-${dir}-bot-branch
  type: git
  source:
    uri: #@ data.values.git_uri
    branch: helm-${dep}-${dir}-bot-branch
    private_key: #@ data.values.github_private_key
EOF
  done <folders

  popd > /dev/null
done

popd > /dev/null

cat $CIJOBS > temp.yml
ytt -f temp.yml \
  -f ci/values.yml > ${TMPDIR}/update-jobs.yml
rm temp.yml

cat $CIRESOURCES > temp.yml
ytt -f temp.yml \
  -f ci/values.yml > ${TMPDIR}/update-resources.yml
rm temp.yml

ytt -f ci/pipeline.yml \
  -f ci/pipeline-fragments.lib.yml \
  -f ci/values.yml > ${TMPDIR}/pipeline.yml

UPDATE_RESOURCES=$(cat ${TMPDIR}/update-resources.yml | yq '.resources' -o=json)
yq -i ".resources += $UPDATE_RESOURCES" ${TMPDIR}/pipeline.yml

UPDATE_JOBS=$(cat ${TMPDIR}/update-jobs.yml | yq '.jobs' -o=json)
yq -i ".jobs += $UPDATE_JOBS" ${TMPDIR}/pipeline.yml

UPDATE_GROUP=$(cat ${TMPDIR}/update-jobs.yml | yq '[.jobs[] | .name]' -o=json)
UPDATE_GROUP=${UPDATE_GROUP//$'\n'/}
yq -i ".groups += {\"name\":\"update\",\"jobs\":$UPDATE_GROUP}" ${TMPDIR}/pipeline.yml

echo "Updating pipeline @ ${target}"

fly -t ${target} set-pipeline --team=${team} -p helm-charts -c ${TMPDIR}/pipeline.yml
fly -t ${target} unpause-pipeline --team=${team} -p helm-charts

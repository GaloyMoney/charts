#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
#@ load("pipeline-fragments.lib.yml",
#@   "pipeline_image",
#@   "task_image_config",
#@   "testflight_job",
#@   "bump_in_deployments_job",
#@   "chart_repo_resource",
#@   "testflight_tf_resource",
#@   "testflight_job_name",
#@   "bump_in_deployments_job_name",
#@   "chart_resource_name",
#@   "cepler_resource_name",
#@   "cepler_in",
#@   "cepler_out",
#@   "cepler_out_name")

#@ bitcoin_charts = ["bitcoind", "lnd", "rtl", "specter"]
#@ def galoy_chart_vars():
testflight_apollo_graph_id: #@ data.values.testflight_apollo_graph_id
testflight_apollo_key: #@ data.values.testflight_apollo_key
#@ end

#@ def monitoring_chart_vars():
#@ end

groups:
- name: galoy
  jobs: 
    - galoy-testflight
    - bump-galoy-in-deployments
    - galoy-staging
    - monitoring-testflight
    - bump-monitoring-in-deployments
    - monitoring-staging
- name: bitcoin
  jobs: 
#@ for chart in bitcoin_charts:
  - #@ testflight_job_name(chart)
  - #@ bump_in_deployments_job_name(chart)
#@ end
  - bitcoin-staging
- name: staging
  jobs:
  - bitcoin-staging
  - galoy-staging
  - monitoring-staging

jobs:
#@ for chart in bitcoin_charts:
- #@ testflight_job(chart)
- #@ bump_in_deployments_job(chart)
#@ end
- #@ testflight_job("galoy", galoy_chart_vars())
- #@ bump_in_deployments_job("galoy")
- #@ testflight_job("monitoring", monitoring_chart_vars())
- #@ bump_in_deployments_job("monitoring")

- name: bitcoin-staging
  serial: true
  plan:
  - get: #@ cepler_resource_name("bitcoin")
    trigger: true
  - put: tf-bitcoin-staging
    tags: ["staging"]
    params:
      terraform_source: #@ cepler_resource_name("bitcoin") + "/gcp/staging/bitcoin"
  - in_parallel:
    - do:
      - task: get-smoketest-settings
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          outputs:
          - name: bitcoind-smoketest-settings
          params:
            SMOKETEST_SECRET: "bitcoind-smoketest"
            SMOKETEST_KUBECONFIG: #@ data.values.staging_smoketest_kubeconfig
            OUT: bitcoind-smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/bitcoind/ci/tasks/get-smoketest-settings.sh
      - task: bitcoind-smoketest
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          - name: bitcoind-smoketest-settings
            path: smoketest-settings
          params:
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/bitcoind/ci/tasks/bitcoind-smoketest.sh
    - do:
      - task: get-smoketest-settings
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          outputs:
          - name: lnd1-smoketest-settings
          params:
            SMOKETEST_SECRET: "lnd1-smoketest"
            SMOKETEST_KUBECONFIG: #@ data.values.staging_smoketest_kubeconfig
            OUT: lnd1-smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/lnd1/ci/tasks/get-smoketest-settings.sh
      - task: lnd1-smoke-test
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          - name: lnd1-smoketest-settings
            path: smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/lnd1/ci/tasks/lnd-smoketest.sh
    - do:
      - task: get-smoketest-settings
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          outputs:
          - name: lnd2-smoketest-settings
          params:
            SMOKETEST_SECRET: "lnd2-smoketest"
            SMOKETEST_KUBECONFIG: #@ data.values.staging_smoketest_kubeconfig
            OUT: lnd2-smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/lnd2/ci/tasks/get-smoketest-settings.sh
      - task: lnd2-smoke-test
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          - name: lnd2-smoketest-settings
            path: smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/lnd2/ci/tasks/lnd-smoketest.sh
    - do:
      - task: get-smoketest-settings
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          outputs:
          - name: specter-smoketest-settings
          params:
            SMOKETEST_SECRET: "specter-smoketest"
            SMOKETEST_KUBECONFIG: #@ data.values.staging_smoketest_kubeconfig
            OUT: specter-smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/specter/ci/tasks/get-smoketest-settings.sh
      - task: specter-smoketest
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          - name: specter-smoketest-settings
            path: smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/specter/ci/tasks/specter-smoketest.sh
    - do:
      - task: get-smoketest-settings
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          outputs:
          - name: rtl-smoketest-settings
          params:
            SMOKETEST_SECRET: "rtl-smoketest"
            SMOKETEST_KUBECONFIG: #@ data.values.staging_smoketest_kubeconfig
            OUT: rtl-smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/rtl/ci/tasks/get-smoketest-settings.sh
      - task: rtl-smoketest
        tags: ["staging"]
        config:
          platform: linux
          image_resource: #@ task_image_config()
          inputs:
          - name: #@ cepler_resource_name("bitcoin")
            path: pipeline-tasks
          - name: rtl-smoketest-settings
            path: smoketest-settings
          run:
            path: pipeline-tasks/modules/services/bitcoin/vendor/rtl/ci/tasks/rtl-smoketest.sh
  - put: #@ cepler_out_name("bitcoin")
    params:
      repository: #@ cepler_resource_name("bitcoin")


- name: galoy-staging
  serial: true
  plan:
  - get: #@ cepler_resource_name("galoy")
    trigger: true
  - put: tf-galoy-staging
    tags: ["staging"]
    params:
      terraform_source: #@ cepler_resource_name("galoy") + "/gcp/staging/galoy"
      vars:
        staging_apollo_graph_id: #@ data.values.staging_apollo_graph_id
        staging_apollo_key: #@ data.values.staging_apollo_key
        firebase_service_account: #@ data.values.staging_firebase_service_account
        staging_twilio_phone_number: #@ data.values.staging_twilio_phone_number
        staging_twilio_api_key: #@ data.values.staging_twilio_api_key
        staging_twilio_api_secret: #@ data.values.staging_twilio_api_secret
        staging_twilio_account_sid: #@ data.values.staging_twilio_account_sid
        staging_smsala_sender_id: #@ data.values.staging_smsala_sender_id
        staging_smsala_api_password: #@ data.values.staging_smsala_api_password
        staging_smsala_api_id: #@ data.values.staging_smsala_api_id
        staging_gcs_sa_key: #@ data.values.staging_gcs_sa_key
        staging_dropbox_access_token: #@ data.values.staging_dropbox_access_token
  - task: get-smoketest-settings
    tags: ["staging"]
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: #@ cepler_resource_name("galoy")
        path: pipeline-tasks
      outputs:
      - name: galoy-smoketest-settings
      params:
        SMOKETEST_SECRET: "galoy-smoketest"
        SMOKETEST_KUBECONFIG: #@ data.values.staging_smoketest_kubeconfig
        OUT: galoy-smoketest-settings
      run:
        path: pipeline-tasks/modules/galoy/vendor/ci/tasks/get-smoketest-settings.sh
  - task: galoy-smoke-test
    tags: ["staging"]
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: #@ cepler_resource_name("galoy")
        path: pipeline-tasks
      - name: galoy-smoketest-settings
        path: smoketest-settings
      run:
        path: pipeline-tasks/modules/galoy/vendor/ci/tasks/galoy-smoketest.sh
  - put: #@ cepler_out_name("galoy")
    params:
      repository: #@ cepler_resource_name("galoy")

- name: monitoring-staging
  serial: true
  plan:
  - in_parallel:
    - get: #@ chart_resource_name("monitoring")
      passed:
      - #@ bump_in_deployments_job_name("monitoring")
      trigger: true
    - { get: pipeline-tasks }
    - { get: galoy-deployments }
  - put: tf-monitoring-staging
    tags: ["staging"]
    params:
      terraform_source: galoy-deployments/gcp/staging/monitoring
      vars:
        name_prefix: #@ data.values.staging_name_prefix
        staging_slack_api_url: #@ data.values.staging_slack_api_url
        staging_pagerduty_service_key: #@ data.values.staging_pagerduty_service_key
  - in_parallel:
    - task: monitoring-smoke-test
      tags: ["staging"]
      config:
        platform: linux
        image_resource: #@ task_image_config()
        inputs:
        - name: pipeline-tasks
        params:
          NAMESPACE: #@ data.values.staging_name_prefix + "-monitoring"
          ALERTMANAGER_DNS: #@ data.values.staging_alertmanager_dns
        run:
          path: pipeline-tasks/ci/tasks/monitoring-smoketest.sh

resources:
#@ for chart in bitcoin_charts:
- #@ chart_repo_resource(chart)
- #@ testflight_tf_resource(chart)
#@ end
- #@ cepler_in("bitcoin")
- #@ cepler_out("bitcoin")

- #@ chart_repo_resource("galoy")
- #@ testflight_tf_resource("galoy")
- #@ cepler_in("galoy")
- #@ cepler_out("galoy")

- #@ chart_repo_resource("monitoring")
- #@ testflight_tf_resource("monitoring")

- name: pipeline-tasks
  type: git
  source:
    paths: [ci/tasks/*, ci/testflight/*, Makefile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: galoy-deployments
  type: git
  source:
    uri: #@ data.values.deployments_git_uri
    branch: #@ data.values.deployments_git_branch
    private_key: #@ data.values.github_private_key

- name: tf-bitcoin-staging
  type: terraform
  source:
    env_name: default
    backend_type: gcs
    backend_config:
      bucket: #@ data.values.staging_state_bucket
      prefix: galoy-staging/services/bitcoin
      credentials: #@ data.values.staging_creds
    env:
      GOOGLE_CREDENTIALS: #@ data.values.staging_creds

- name: tf-galoy-staging
  type: terraform
  source:
    env_name: default
    backend_type: gcs
    backend_config:
      bucket: #@ data.values.staging_state_bucket
      prefix: galoy-staging/services/galoy
      credentials: #@ data.values.staging_creds
    env:
      GOOGLE_CREDENTIALS: #@ data.values.staging_creds

- name: tf-monitoring-staging
  type: terraform
  source:
    env_name: default
    backend_type: gcs
    backend_config:
      bucket: #@ data.values.staging_state_bucket
      prefix: galoy-staging/services/monitoring
      credentials: #@ data.values.staging_creds
    env:
      GOOGLE_CREDENTIALS: #@ data.values.staging_creds

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: cepler-in
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: 0.7.1

- name: cepler-out
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: 0.7.1
